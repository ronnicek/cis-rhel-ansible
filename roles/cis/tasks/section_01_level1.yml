---
#
# Copyright 2016 Alexander Verhaar
# Copyright 2014 Major Hayden
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#

  - name: 1.1.1 Create Separate Partition for /tmp (Scored)
    debug: 
      msg: "*** Manually create Separate Partition for /tmp."
    failed_when: "'/tmp' not in mountpoints"
    tags:
      - scored
      - section1.1
      - section1.1.1

  - name: 1.1.2 - 1.1.4 Set nodev,nosuid,noexec option for /tmp Partition (Scored)
    mount:
      path: /tmp"
      src: "{{ item.device }}"
      state: mounted
      fstype: "{{ item.fstype }}"
      opts: nodev,nosuid,noexec
    when: item.mount == "/tmp"
    with_items: ansible_mounts
    tags:
      - scored
      - section1.1
      - section1.1.2
      - section1.1.3
      - section1.1.4

  - name: 1.1.5 Create Separate Partition for /var (Scored)
    debug: 
      msg: "*** Manually create Separate Partition for /var."
    failed_when: "'/var' not in mountpoints"
    tags:
      - scored
      - section1.1
      - section1.1.5

  - name: 1.1.6 Bind Mount the /var/tmp directory to /tmp (Scored)
    mount:
      path: /var/tmp/"
      src: "{{ item.device }}"
      state: mounted
      fstype: "{{ item.fstype }}"
      opts: nodev,nosuid,noexec
    when: item.mount == "/var/tmp"
    with_items: ansible_mounts
    tags:
      - scored
      - section1.1
      - section1.1.6

  - name: 1.1.7 Create Separate Partition for /var/log (Scored)
    debug: 
      msg: "*** Manually create Separate Partition for /var/log."
    failed_when: "'/var/log' not in mountpoints"
    tags:
      - scored
      - section1.1
      - section1.1.7

  - name: 1.1.8 Create Separate Partition for /var/log/audit (Scored)
    debug: 
      msg: "*** Manually create Separate Partition for /var/log/audit."
    failed_when: "'/var/log/audit' not in mountpoints"
    tags:
      - scored
      - section1.1
      - section1.1.8

  - name: 1.1.9 Create Separate Partition for /home (Scored)
    debug: 
      msg: "*** Manually create Separate Partition for /home."
    failed_when: "'/home' not in mountpoints"
    tags:
      - scored
      - section1.1
      - section1.1.9

  - name: 1.1.10 Add nodev Option to /home Partition (Scored)
    mount:
      path: "/home"
      src: "{{ item.device }}"
      state: mounted
      fstype: "{{ item.fstype }}"
      opts: "nodev"
    when: item.mount == "/home"
    with_items: ansible_mounts
    tags:
      - scored
      - section1.1
      - section1.1.10

  - name: 1.1.11 Add nodev Option to Removable Media Partitions (Not Scored)
    debug: 
      msg: "*** Not relevant."
    tags:
      - scored
      - section1.1
      - section1.1.11

  - name: 1.1.12 Add noexec Option to Removable Media Partitions (Not Scored)
    debug: 
      msg: "*** Not relevant."
    tags:
      - notscored
      - section1.1
      - section1.1.12

  - name: 1.1.13 Add nosuid Option to Removable Media Partitions (Not Scored)
    debug: 
      msg: "*** Not relevant."
    tags:
      - notscored
      - section1.1
      - section1.1.13

  - name: 1.1.14 - 1.1.16 Add noexec Option to /dev/shm Partition (Scored)
    mount:
      path: "/dev/shm"
      src: "none"
      state: mounted
      fstype: "tmpfs"
      opts: "nodev,nosuid,noexec"
    tags:
      - section1.1
      - section1.1.14
      - section1.1.15
      - section1.1.16
      - scored

  - name: 1.1.17 Set sticky bit on all world-writeable directories (Scored)
    shell: df --local -P | awk {'if (NR!=1) print $6'} | xargs -I '{}' find '{}' -xdev -type d \( -perm -0002 -a ! -perm -1000 \) 2>/dev/null
    register: result1_1_17
    tags:
      - scored
      - section1.1
      - section1.1.17

  - name: 1.1.17 Set sticky bit on all world-writeable directories (Scored)
    shell: df --local -P | awk {'if (NR!=1) print $6'} | xargs -I '{}' find '{}' -xdev -type d \( -perm -0002 -a ! -perm -1000 \) 2>/dev/null | xargs chmod a+t
    when: result1_1_17 == ""
    tags:
      - scored
      - section1.1
      - section1.1.17

  - name: 1.2.1 Configure Connection to the RHN RPM repositories (Not Scored)
    command: yum check-update
    register: result
    failed_when: "result.rc == 1"
    when: ansible_distribution == "RedHat"
    tags:
      - notscored
      - section1.2
      - section1.2.1

  - name: 1.2.2 Verify Red Hat GPG key is installed (Scored)
    command: gpg --quiet --with-fingerprint /etc/pki/rpm-gpg/RPM-GPG-KEY-redhat-release
    when: ansible_distribution == "RedHat"
    tags:
      - scored
      - section1.2
      - section1.2.2

  - name: 1.2.3 Verify that gpgcheck is Globally Activated (Scored)
    lineinfile:
      state: present
      dest: /etc/yum.conf
      regexp: ^gpgcheck=
      line: gpgcheck=1
    tags:
      - scored
      - section1.2
      - section1.2.3

  - name: 1.2.4 Disable the rhnsd Daemon (Not Scored)
    shell: systemctl is-enabled rhnsd &>/dev/null && echo "enabled" || echo "disabled"
    register: result1_2_4
    changed_when: False
    tags:
      - notscored
      - section1.2
      - section1.2.4

  - name: 1.2.4 Disable the rhnsd Daemon (Not Scored)
    service:
      name: rhnsd
      state: stopped
      enabled: no
    when: "'enabled' in result1_2_4.stdout"
    tags:
      - notscored
      - section1.2
      - section1.2.4

  - name: 1.2.5 Obtain software package updates with yum (Not Scored)
    debug: 
      msg: "*** Check manually."
    tags:
      - notscored
      - section1.2
      - section1.2.5

  - name: 1.2.6 Verify package integrity using RPM (Not Scored)
    debug: 
      msg: "*** Check via cron/AIDE/manually"
    tags:
      - notscored
      - section1.2
      - section1.2.6

  - name: 1.5.1 Get Absolute Path to grub config
    command: readlink -f /etc/default/grub
    register: readlink
    changed_when: false
    always_run: yes
    tags:
      - scored
      - section1.5
      - section1.5.1

  - name: 1.5.1 Set User/Group Owner on /etc/default/grub (Scored)
    file:
      path: "{{ readlink.stdout }}"
      owner: root
      group: root
    tags:
      - scored
      - section1.5
      - section1.5.1

  - name: 1.5.2 Get Absolute Path to grub config
    command: readlink -f /etc/default/grub
    register: readlink
    changed_when: false
    always_run: yes
    tags:
      - scored
      - section1.5
      - section1.5.2

  - name: 1.5.2 Set Permissions on /etc/default/grub (Scored)
    file:
      path: "{{ readlink.stdout }}"
      mode: 0400
    tags:
      - scored
      - section1.5
      - section1.5.2

  # TODO: Needs to be implemented
  - name: 1.5.3 Set boot loader password (Scored)
    debug: 
      msg: "*** Too destructive for production systems. Evaluate for your environment first."
    tags:
      - scored
      - section1.5
      - section1.5.3

  - name: 1.6.1 Restrict core dumps (Scored) - via pam
    lineinfile:
      dest: /etc/security/limits.conf
      line: "* hard core 0"
      insertafter: EOF
    tags:
      - scored
      - section1.6
      - section1.6.1

  - name: 1.6.1 Restrict core dumps (Scored) - via sysctl
    sysctl:
      name: fs.suid_dumpable
      value: "0"
      state: present
      ignoreerrors: yes
    tags:
      - scored
      - section1.6
      - section1.6.1

  - name: 1.6.2 Enable Randomized Virtual Memory Region Placement (Scored)
    sysctl:
      name: kernel.randomize_va_space
      value: "2"
      state: present
      ignoreerrors: yes
    tags:
      - scored
      - section1.6
      - section1.6.2

  - name: 1.7 Use the Latest OS Release (Not Scored)
    command:
      cat /etc/redhat-release
    when: ansible_distribution == "RedHat"
    tags:
      - notscored
      - section1.7
