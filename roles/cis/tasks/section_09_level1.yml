---
#
# Copyright 2016 Alexander Verhaar
# Copyright 2014 Major Hayden
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#

  - name: 9.1.2 Verify Permissions on /etc/passwd (Scored)
    file:
      path: /etc/passwd
      mode: 0644
    tags:
      - scored
      - section9.1
      - section9.1.2

  - name: 9.1.3 Verify Permissions on /etc/shadow (Scored)
    file:
      path: /etc/shadow
      mode: 0000
    tags:
      - scored
      - section9.1
      - section9.1.3

  - name: 9.1.4 Verify Permissions on /etc/gshadow (Scored)
    file:
      path: /etc/gshadow
      mode: 0000
    tags:
      - scored
      - section9.1
      - section9.1.4

  - name: 9.1.5 Verify Permissions on /etc/group (Scored)
    file:
      path: /etc/group
      mode: 0644
    tags:
      - scored
      - section9.1
      - section9.1.5

  - name: 9.1.6 Verify User/Group Ownership on /etc/passwd (Scored)
    file:
      path: /etc/passwd
      owner: root
      group: root
    tags:
      - scored
      - section9.1
      - section9.1.6

  - name: 9.1.7 Verify User/Group Ownership on /etc/shadow (Scored)
    file:
      path: /etc/shadow
      owner: root
      group: root
    tags:
      - scored
      - section9.1
      - section9.1.7

  - name: 9.1.8 Verify User/Group Ownership on /etc/gshadow (Scored)
    file:
      path: /etc/gshadow
      owner: root
      group: root
    tags:
      - scored
      - section9.1
      - section9.1.8

  - name: 9.1.9 Verify User/Group Ownership on /etc/group (Scored)
    file:
      path: /etc/group
      owner: root
      group: root
    tags:
      - scored
      - section9.1
      - section9.1.9

  - name: 9.1.10 Find World Writable Files (Not Scored)
    shell: "df --local -P | awk {'if (NR!=1) print $6'} | xargs -I '{}' find '{}' -xdev -type f -perm -0002"
    when: verify_find
    tags:
      - notscored
      - section9.1
      - section9.1.10

  - name: 9.1.11 Find Un-owned Files and Directories (Scored)
    shell: "df --local -P | awk {'if (NR!=1) print $6'} | xargs -I '{}' find '{}' -xdev -nouser -ls"
    when: verify_find
    tags:
      - scored
      - section9.1
      - section9.1.11

  - name: 9.1.12 Find Un-grouped Files and Directories (Scored)
    shell: "df --local -P | awk {'if (NR!=1) print $6'} | xargs -I '{}' find '{}' -xdev -nogroup -ls"
    when: verify_find
    tags:
      - scored
      - section9.1
      - section9.1.12

  - name: 9.1.13 Find SUID System Executables (Not Scored)
    shell: '/bin/rpm -V `/bin/rpm -qf /usr/bin/sudo`'
    register: suid
    when: verify_rpm
    tags:
      - notscored
      - section9.1
      - section9.1.13

  - name: 9.1.14 Find SGID System Executables (Not Scored)
    shell: '/bin/rpm -V `/bin/rpm -qf /usr/bin/sudo`'
    register: sgid
    when: verify_rpm
    tags:
      - notscored
      - section9.1
      - section9.1.14

  - name: 9.2.1 Ensure Password Fields are Not Empty (Scored)
    shell: /bin/cat /etc/shadow | /bin/awk -F':' '($2 == "" ) { print $1 " does not have a password "}'
    register: result9_2_1
    changed_when: "result9_2_1.stdout"
    always_run: yes
    tags:
      - scored
      - section9.2
      - section9.2.1

  - name: 9.2.2 Verify No Legacy "+" Entries Exist in /etc/passwd File (Scored)
    shell: /bin/grep '^+:' /etc/passwd
    register: result9_2_2
    failed_when: result9_2_2.rc == 0
    changed_when: result9_2_2.rc == 0
    always_run: yes
    ignore_errors: yes
    tags:
      - scored
      - section9.2
      - section9.2.2

  - name: 9.2.3 Verify No Legacy "+" Entries Exist in /etc/shadow File (Scored)
    shell: /bin/grep '^+:' /etc/shadow
    register: result9_2_3
    failed_when: result9_2_3.rc == 0
    changed_when: result9_2_3.rc == 0
    always_run: yes
    ignore_errors: yes
    tags:
      - scored
      - section9.2
      - section9.2.3

  - name: 9.2.4 Verify No Legacy "+" Entries Exist in /etc/group File (Scored)
    shell: /bin/grep '^+:' /etc/group
    register: result9_2_4
    failed_when: result9_2_4.rc == 0
    changed_when: result9_2_4.rc == 0
    always_run: yes
    ignore_errors: yes
    tags:
      - scored
      - section9.2
      - section9.2.4

  - name: 9.2.5 Verify No UID 0 Accounts Exist Other Than root (Scored)
    shell: /bin/awk -F':' '($3 == 0) { print $1 }' /etc/passwd | grep -qx 'root'
    register: result9_2_5
    failed_when: result9_2_5.rc != 0
    changed_when: result9_2_5.rc != 0
    always_run: yes
    ignore_errors: yes
    tags:
      - scored
      - section9.2
      - section9.2.5

  - name: 9.2.6 Ensure root PATH Integrity (Scored)
    shell: |
      if [ "`echo $PATH | /bin/grep :: `" != "" ]; then
        echo "Empty Directory in PATH (::)"
      fi
      if [ "`echo $PATH | /bin/grep :$`" != "" ]; then
        echo "Trailing : in PATH"
      fi
      p=`echo $PATH | /bin/sed -e 's/::/:/' -e 's/:$//' -e 's/:/ /g'`
      set -- $p
      while [ "$1" != "" ]; do
        if [ "$1" = "." ]; then
          echo "PATH contains ."
          shift
          continue
        fi
        if [ -d $1 ]; then
          dirperm=`/bin/ls -ldH $1 | /bin/cut -f1 -d" "`
          if [ `echo $dirperm | /bin/cut -c6 ` != "-" ]; then
            echo "Group Write permission set on directory $1"
          fi
          if [ `echo $dirperm | /bin/cut -c9 ` != "-" ]; then
            echo "Other Write permission set on directory $1"
          fi
          dirown=`ls -ldH $1 | awk '{print $3}'`
          if [ "$dirown" != "root" ] ; then
            echo $1 is not owned by root
          fi
        else
          echo $1 is not a directory
        fi
        shift
      done
    register: result9_2_6
    changed_when: "result9_2_6.stdout"
    failed_when: "result9_2_6.stdout"
    tags:
      - scored
      - section9.2
      - section9.2.6

  - name: 9.2.7 Check Permissions on User Home Directories (Scored)
    shell: |
      for dir in `/bin/cat /etc/passwd | /bin/egrep -v '(root|halt|sync|shutdown)' |\
        /bin/awk -F: '($8 == "PS" && $7 != "/sbin/nologin") { print $6 }'`; do
        dirperm=`/bin/ls -ld $dir | /bin/cut -f1 -d" "`
        if [ `echo $dirperm | /bin/cut -c6 ` != "-" ]; then
          echo "Group Write permission set on directory $dir"
        fi
        if [ `echo $dirperm | /bin/cut -c8 ` != "-" ]; then
          echo "Other Read permission set on directory $dir"
        fi
        if [ `echo $dirperm | /bin/cut -c9 ` != "-" ]; then
          echo "Other Write permission set on directory $dir"
        fi
        if [ `echo $dirperm | /bin/cut -c10 ` != "-" ]; then
          echo "Other Execute permission set on directory $dir"
        fi
      done
    register: result9_2_7
    changed_when: "result9_2_7.stdout"
    failed_when: "result9_2_7.stdout"
    tags:
      - scored
      - section9.2
      - section9.2.7

  - name: 9.2.8 Check User Dot File Permissions (Scored)
    shell: |
      for dir in `/bin/cat /etc/passwd | /bin/egrep -v '(root|sync|halt|shutdown)' |
        /bin/awk -F: '($7 != "/sbin/nologin") { print $6 }'`; do
        for file in $dir/.[A-Za-z0-9]*; do
          if [ ! -h "$file" -a -f "$file" ]; then
            fileperm=`/bin/ls -ld $file | /bin/cut -f1 -d" "`
            if [ `echo $fileperm | /bin/cut -c6 ` != "-" ]; then
              echo "Group Write permission set on file $file"
            fi
            if [ `echo $fileperm | /bin/cut -c9 ` != "-" ]; then
              echo "Other Write permission set on file $file"
            fi
          fi
        done
      done
    register: result9_2_8
    changed_when: "result9_2_8.stdout"
    failed_when: "result9_2_8.stdout"
    tags:
      - scored
      - section9.2
      - section9.2.8

  - name: 9.2.9 Check Permissions on User .netrc Files (Scored)
    shell: |
      for dir in `/bin/cat /etc/passwd | /bin/egrep -v '(root|sync|halt|shutdown)' |\
        /bin/awk -F: '($7 != "/sbin/nologin") { print $6 }'`; do
        for file in $dir/.netrc; do
          if [ ! -h "$file" -a -f "$file" ]; then
            fileperm=`/bin/ls -ld $file | /bin/cut -f1 -d" "`
            if [ `echo $fileperm | /bin/cut -c5 ` != "-" ]
            then
              echo "Group Read set on $file"
            fi
            if [ `echo $fileperm | /bin/cut -c6 ` != "-" ]
            then
              echo "Group Write set on $file"
            fi
            if [ `echo $fileperm | /bin/cut -c7 ` != "-" ]
            then
              echo "Group Execute set on $file"
            fi
            if [ `echo $fileperm | /bin/cut -c8 ` != "-" ]
            then
              echo "Other Read set on $file"
            fi
            if [ `echo $fileperm | /bin/cut -c9 ` != "-" ]
            then
              echo "Other Write set on $file"
            fi
            if [ `echo $fileperm | /bin/cut -c10 ` != "-" ]
            then
              echo "Other Execute set on $file"
            fi
          fi
        done
      done
    register: result9_2_9
    changed_when: "result9_2_9.stdout"
    failed_when: "result9_2_9.stdout"
    tags:
      - scored
      - section9.2
      - section9.2.9

  - name: 9.2.10 Check for Presence of User .rhosts Files (Scored)
    shell: |
      for dir in `/bin/cat /etc/passwd | /bin/egrep -v '(root|halt|sync|shutdown)' |\
        /bin/awk -F: '($7 != "/sbin/nologin") { print $6 }'`; do
        for file in $dir/.rhosts; do
          if [ ! -h "$file" -a -f "$file" ]; then
            echo ".rhosts file in $dir"
          fi
        done
      done
    register: result9_2_10
    changed_when: "result9_2_10.stdout"
    failed_when: "result9_2_10.stdout"
    tags:
      - scored
      - section9.2
      - section9.2.10

  - name: 9.2.11 Check Groups in /etc/passwd (Scored)
    shell: |
      for i in $(cut -s -d: -f4 /etc/passwd | sort -u ); do
        grep -q -P "^.*?:x:$i:" /etc/group
        if [ $? -ne 0 ]; then
          echo "Group $i is referenced by /etc/passwd but does not exist in /etc/group"
        fi
      done
    register: result9_2_11
    changed_when: "result9_2_11.stdout"
    failed_when: "result9_2_11.stdout"
    tags:
      - scored
      - section9.2
      - section9.2.11

  - name: 9.2.12 Check That Users Are Assigned Valid Home Directories (Scored)
    shell: |
      cat /etc/passwd | awk -F: '{ print $1 " " $3 " " $6 }' | while read user uid dir; do
      if [ $uid -ge 1000 -a ! -d "$dir" -a $user != "nfsnobody" ]; then
        echo "The home directory ($dir) of user $user does not exist."
      fi
      done
    register: result9_2_12
    failed_when: "result9_2_12.stdout"
    changed_when: "result9_2_12.stdout"
    always_run: yes
    tags:
      - scored
      - section9.2
      - section9.2.12

  - name: 9.2.13 Check User Home Directory Ownership (Scored)
    shell: |
      cat /etc/passwd | awk -F: '{ print $1 " " $3 " " $6 }' | while read user uid dir; do
      if [ $uid -ge 1000 -a -d "$dir" -a $user != "nfsnobody" ]; then
        owner=$(stat -L -c "%U" "$dir")
        if [ "$owner" != "$user" ]; then
          echo "The home directory ($dir) of user $user is owned by $owner."
        fi
      fi
      done
    register: result9_2_13
    failed_when: "result9_2_13.stdout"
    changed_when: "result9_2_13.stdout"
    always_run: yes
    tags:
      - scored
      - section9.2
      - section9.2.13

  - name: 9.2.14 Check for Duplicate UIDs (Scored)
    shell: for dupeID in  $(cut -f3 -d":" /etc/passwd | sort | uniq -c | sort -n | awk ' $1 > 1 {print $2}'); do awk -F':' -v dupeid=$dupeID '$3 == dupeid {print $1}' /etc/passwd   ; done
    register: result9_2_15
    changed_when: "result9_2_15.stdout"
    always_run: yes
    tags:
      - scored
      - section9.2
      - section9.2.14

  - name: 9.2.15 Check for Duplicate GIDs (Scored)
    shell: for dupeID in  $(cut -f3 -d":" /etc/group | sort | uniq -c | sort -n | awk ' $1 > 1 {print $2}'); do awk -F':' -v dupeid=$dupeID '$3 == dupeid {print $1}' /etc/group   ; done
    register: result9_2_15
    changed_when: "result9_2_15.stdout"
    always_run: yes
    tags:
      - scored
      - check-only
      - section9.2
      - section9.2.15

  - name: 9.2.16 Check That Reserved UIDs Are Assigned to System Accounts (Scored)
    shell: |
      defUsers="root bin daemon adm lp sync shutdown halt mail news uucp operator games
      gopher ftp nobody nscd vcsa rpc mailnull smmsp pcap ntp dbus avahi sshd rpcuser
      nfsnobody haldaemon avahi-autoipd distcache apache oprofile webalizer dovecot squid
      named xfs gdm sabayon usbmuxd rtkit abrt saslauth pulse postfix tcpdump tss"
      /bin/cat /etc/passwd | /bin/awk -F: '($3 < 500) { print $1" "$3 }' |\
      while read user uid; do
        found=0
        for tUser in ${defUsers}; do
          if [ ${user} = ${tUser} ]; then
            found=1
          fi
        done
        if [ $found -eq 0 ]; then
          echo "User $user has a reserved UID ($uid)."
        fi
      done
    register: result9_2_16
    failed_when: "result9_2_16.stdout"
    changed_when: "result9_2_16.stdout"
    always_run: yes
    tags:
      - scored
      - section9.2
      - section9.2.16

  - name: 9.2.17 Check for Duplicate User Names (Scored)
    shell: cut -f1 -d':' /etc/passwd | sort | uniq -c | sort -n | awk ' $1 > 1 {print $2}'
    register: result9_2_17
    changed_when: "result9_2_17.stdout"
    always_run: yes
    tags:
      - scored
      - check-only
      - section9.2
      - section9.2.17

  - name: 9.2.18 Check for Duplicate Group Names (Scored)
    shell: cut -f1 -d':' /etc/group | sort | uniq -c | sort -n | awk ' $1 > 1 {print $2}'
    register: result9_2_18
    changed_when: "result9_2_18.stdout"
    always_run: yes
    tags:
      - scored
      - check-only
      - section9.2
      - section9.2.18

  - name: 9.2.19 Check for Presence of User .netrc Files (Scored)
    shell:  for h in $(/bin/awk -F':' '$7 !~ /\/sbin\/nologin/ && $7 !~ /\/bin\/false/ { print $6 }' /etc/passwd); do if [[ -f $h/.netrc && -s $h/.netrc ]]; then echo $h; fi ; done
    register: result9_2_19
    changed_when: "result9_2_19.stdout"
    always_run: yes
    tags:
      - scored
      - check-only
      - section9.2
      - section9.2.19

  - name: 9.2.20 Check for Presence of User .forward Files (Scored)
    shell:  for h in $(/bin/awk -F':' '$7 !~ /\/sbin\/nologin/ && $7 !~ /\/bin\/false/ { print $6 }' /etc/passwd); do if [[ -f $h/.forward && -s $h/.forward ]]; then echo $h; fi ; done
    register: result9_2_20
    changed_when: "result9_2_20.stdout"
    always_run: yes
    tags:
      - scored
      - check-only
      - section9.2
      - section9.2.20

#  - debug: var=result9_2_19.stdout
#    tags:
#      - section9.2.19
